variables:
  NAMESPACE: "default"

stages:
  - test
  - set_env
  - build
  - run_instance
  - deploy

run_tests:
  stage: test
  image: node:19-alpine
  before_script:
    - npm install
    # - npm run build
  script:
    # - npm run test
    - npm run build

set_env:
  stage: set_env
  before_script:
    - apt-get update && apt-get install -y awscli jq
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - unset AWS_SESSION_TOKEN
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - export DOCKER_USERNAME=$(aws secretsmanager get-secret-value --secret-id "docker-username" --query 'SecretString' --output text | jq -r '.DOCKER_USERNAME')
    - export DOCKER_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "docker-password" --query 'SecretString' --output text | jq -r '.DOCKER_PASSWORD')
    - export EC2_SSH_PRIVATE_KEY=$(aws secretsmanager get-secret-value --secret-id "ec2-ssh-private-key" --query 'SecretString' --output text | jq -r '.EC2_SSH_PRIVATE_KEY')
    - export SECURITY_GROUP_ID=$(aws secretsmanager get-secret-value --secret-id "security-group-id" --query 'SecretString' --output text | jq -r '.SECURITY_GROUP_ID')
    - export EC2_USERNAME=$(aws secretsmanager get-secret-value --secret-id "ec2-username" --query 'SecretString' --output text | jq -r '.EC2_USERNAME')
  only:
    variables:
      - $NAMESPACE != "default"

variables:
  IMAGE_NAME: "$DOCKER_USERNAME/novo-frontend-image"
  IMAGE_TAG: "novo-frontend-1.0.0"

build_image:
  stage: build
  image: docker:20.10.23
  services:
    - docker:20.10.23-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  script:
    - echo "VITE_NANGO_SERVER_URL=$NANGO_SERVER_URL_DEV" > .env
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
  only:
    variables:
      - $NAMESPACE != "default"

#!/bin/bash
run_instance:
  stage: run_instance
  before_script:
    - apt-get update && apt-get install -y awscli jq
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
    - unset AWS_SESSION_TOKEN
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - instance_id=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$NAMESPACE" --query "Reservations[].Instances[].InstanceId" --output=text)
    - echo "$EC2_SSH_PRIVATE_KEY" > novo-dev-server-key.pem
    - chmod 400 novo-dev-server-key.pem
    - >
      if [ -z "$instance_id" ];
      then
        echo "New Instance"
        instance_id=$(aws ec2 run-instances \
          --image-id ami-0ffac3e16de16665e \
          --count 1 \
          --instance-type t2.micro \
          --key-name novo-dev-server-key \
          --security-group-ids $SECURITY_GROUP_ID \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NAMESPACE}]" \
          --query "Instances[0].InstanceId" \
          --output=text)
        public_dns=$(aws ec2 describe-instances \
          --instance-ids $instance_id \
          --query "Reservations[].Instances[].PublicDnsName" \
          --output=text)
        echo "New instance created with IP: $public_dns"
        export INSTANCE_IP=$public_dns
      else
        echo "Existing Instance"
        public_dns=$(aws ec2 describe-instances \
          --instance-ids $instance_id \
          --query "Reservations[].Instances[].PublicDnsName" \
          --output=text)
        echo "Instance already exists with IP: $public_dns"
        export INSTANCE_IP=$public_dns
        echo $INSTANCE_IP > instance_ip.txt
      fi
  artifacts:
    paths:
      - instance_ip.txt
  only:
    variables:
      - $NAMESPACE != "default"

deploy:
  stage: deploy
  dependencies:
    - run_instance
  script:
    - INSTANCE_IP=$(cat instance_ip.txt)
    - echo "$EC2_SSH_PRIVATE_KEY" > novo-dev-server-key.pem
    - chmod 400 novo-dev-server-key.pem
    - ssh -o StrictHostKeyChecking=no -i "novo-dev-server-key.pem" $EC2_USERNAME@$INSTANCE_IP "
        sudo yum update -y &&
        sudo yum install docker -y &&
        sudo usermod -aG docker $EC2_USERNAME &&
        sudo yum install docker -y &&
        sudo pgrep -f docker > /dev/null &&
        sudo systemctl start docker &&
        sudo docker pull $IMAGE_NAME:$IMAGE_TAG &&
        sudo docker stop $NAMESPACE-frontend || true &&
        sudo docker rm $NAMESPACE-frontend || true &&
        sudo docker run -d --name $NAMESPACE-frontend -p 3001:80 $IMAGE_NAME:$IMAGE_TAG"
  artifacts:
    paths:
      - instance_ip.txt
  only:
    variables:
      - $NAMESPACE != "default"
